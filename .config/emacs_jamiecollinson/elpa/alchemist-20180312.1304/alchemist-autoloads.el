;;; alchemist-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from alchemist.el

(autoload 'alchemist-mode "alchemist" "\
Toggle alchemist mode.

Key bindings:
\\{alchemist-mode-map}

This is a minor mode.  If called interactively, toggle the
`alchemist mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `alchemist-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "alchemist" '("alchemist-"))


;;; Generated autoloads from alchemist-company.el

(register-definition-prefixes "alchemist-company" '("alchemist-company"))


;;; Generated autoloads from alchemist-compile.el

(register-definition-prefixes "alchemist-compile" '("alchemist-compile"))


;;; Generated autoloads from alchemist-complete.el

(register-definition-prefixes "alchemist-complete" '("alchemist-comp"))


;;; Generated autoloads from alchemist-eval.el

(register-definition-prefixes "alchemist-eval" '("alchemist-eval-"))


;;; Generated autoloads from alchemist-execute.el

(register-definition-prefixes "alchemist-execute" '("alchemist-execute"))


;;; Generated autoloads from alchemist-file.el

(register-definition-prefixes "alchemist-file" '("alchemist-file-"))


;;; Generated autoloads from alchemist-goto.el

(register-definition-prefixes "alchemist-goto" '("alchemist-goto-"))


;;; Generated autoloads from alchemist-help.el

(register-definition-prefixes "alchemist-help" '("alchemist-help"))


;;; Generated autoloads from alchemist-hex.el

(register-definition-prefixes "alchemist-hex" '("alchemist-hex"))


;;; Generated autoloads from alchemist-hooks.el

(register-definition-prefixes "alchemist-hooks" '("alchemist-hooks-"))


;;; Generated autoloads from alchemist-iex.el

(defalias 'run-elixir 'alchemist-iex-run)
(autoload 'alchemist-iex-run "alchemist-iex" "\
Start an IEx process.
Show the IEx buffer if an IEx process is already run.

(fn &optional ARG)" t)
(autoload 'alchemist-iex-project-run "alchemist-iex" "\
Start an IEx process with mix 'iex -S mix' in the
context of an Elixir project.
Show the IEx buffer if an IEx process is already run." t)
(register-definition-prefixes "alchemist-iex" '("alchemist-iex-" "inferior-elixir"))


;;; Generated autoloads from alchemist-info.el

(register-definition-prefixes "alchemist-info" '("alchemist-info-"))


;;; Generated autoloads from alchemist-interact.el

(register-definition-prefixes "alchemist-interact" '("alchemist-interact-"))


;;; Generated autoloads from alchemist-key.el

(register-definition-prefixes "alchemist-key" '("alchemist-key-command-prefix"))


;;; Generated autoloads from alchemist-macroexpand.el

(register-definition-prefixes "alchemist-macroexpand" '("alchemist-macroexpand-"))


;;; Generated autoloads from alchemist-message.el

(register-definition-prefixes "alchemist-message" '("alchemist-message"))


;;; Generated autoloads from alchemist-mix.el

(register-definition-prefixes "alchemist-mix" '("alchemist-"))


;;; Generated autoloads from alchemist-phoenix.el

(autoload 'alchemist-phoenix-project-p "alchemist-phoenix" "\
Return non-nil if `default-directory' is inside a Phoenix project.")
(autoload 'alchemist-phoenix-mode "alchemist-phoenix" "\
Minor mode for Elixir Phoenix web framework projects.

The following commands are available:

\\{alchemist-phoenix-mode-map}

This is a minor mode.  If called interactively, toggle the
`alchemist-phoenix mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `alchemist-phoenix-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'alchemist-phoenix-enable-mode "alchemist-phoenix")
(dolist (hook '(alchemist-mode-hook)) (add-hook hook 'alchemist-phoenix-enable-mode))
(register-definition-prefixes "alchemist-phoenix" '("alchemist-phoenix-"))


;;; Generated autoloads from alchemist-project.el

(register-definition-prefixes "alchemist-project" '("alchemist-project-"))


;;; Generated autoloads from alchemist-refcard.el

(autoload 'alchemist-refcard "alchemist-refcard" "\
Generate an Alchemist refcard of all the features." t)
(register-definition-prefixes "alchemist-refcard" '("alchemist-refcard-"))


;;; Generated autoloads from alchemist-report.el

(register-definition-prefixes "alchemist-report" '("alchemist-report-"))


;;; Generated autoloads from alchemist-scope.el

(register-definition-prefixes "alchemist-scope" '("alchemist-scope-"))


;;; Generated autoloads from alchemist-server.el

(register-definition-prefixes "alchemist-server" '("alchemist-server"))


;;; Generated autoloads from alchemist-test-mode.el

(autoload 'alchemist-test-mode "alchemist-test-mode" "\
Minor mode for Elixir ExUnit files.

The following commands are available:

\\{alchemist-test-mode-map}

This is a minor mode.  If called interactively, toggle the
`Alchemist-Test mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `alchemist-test-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'alchemist-test-enable-mode "alchemist-test-mode")
(dolist (hook '(alchemist-mode-hook)) (add-hook hook 'alchemist-test-enable-mode))
(register-definition-prefixes "alchemist-test-mode" '("alchemist-test"))


;;; Generated autoloads from alchemist-utils.el

(register-definition-prefixes "alchemist-utils" '("alchemist-utils-"))

;;; End of scraped data

(provide 'alchemist-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; alchemist-autoloads.el ends here
